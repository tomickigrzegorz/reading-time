{"version":3,"file":"readingTime.esm.js","sources":["../sources/helpers/functions.js","../sources/script.js"],"sourcesContent":["// https://www.freecodecamp.org/news/how-to-more-accurately-estimate-read-time-for-medium-articles-in-javascript-fb563ff0282a/\r\n/**\r\n * Calculate how much time is needed to view photos\r\n * @param {Number} numberImages\r\n * @param {Number} photosPerMinute\r\n * @returns {Number}\r\n */\r\nconst imageReadTime = (numberImages, photosPerMinute) => {\r\n  let second =\r\n    numberImages > 10\r\n      ? (numberImages / 2) * (photosPerMinute + 3) + (numberImages - 10) * 3 // n/2(a+b)+3sec/image\r\n      : (numberImages / 2) * (2 * photosPerMinute + (1 - numberImages)); // n/2[2a+(n-1)d]\r\n\r\n  return Math.ceil(second / 60);\r\n};\r\n\r\n/**\r\n * Get all images from elements\r\n * @param {String} str\r\n * @param {Object} { img, noscript }\r\n * @returns {Number}\r\n */\r\nconst getImages = (str, { img, noscript }) => {\r\n  let images = [];\r\n  let image;\r\n\r\n  while ((image = img.exec(str.replace(noscript)))) {\r\n    images.push(image[1]);\r\n  }\r\n\r\n  return images.length;\r\n};\r\n\r\n// https://generator.lorem-ipsum.info/_korean2\r\n// https://www.regular-expressions.info/unicode.html\r\n/**\r\n * Count all characters in string\r\n * @param {String} str\r\n * @param {Object} { global, notAword, newLine, space }\r\n * @returns {Number} \r\n */\r\nconst match = (str, { global, notAword, newLine, space }) => {\r\n  const charCount = str.match(global);\r\n\r\n  let text = str.replace(notAword, ' ');\r\n  text = str.replace(newLine, ' ');\r\n  text = str.replace(global, ' ');\r\n\r\n  return text.split(space).length + (charCount ? charCount.length : 0);\r\n};\r\n\r\n/**\r\n * Count how many characters are excluded from counting\r\n * @param {HTMLElement} element\r\n * @param {Array} exc - exclude elements\r\n * @returns {Number} exclude count chars\r\n */\r\nconst excludeCount = (element, exc, regexDefault) => {\r\n  let excludeCountChars = 0;\r\n  [].slice.call(exc).forEach((ex) => {\r\n    const text = ex.innerText.trim();\r\n    if (ex && element.contains(ex)) {\r\n      excludeCountChars = match(text, regexDefault);\r\n    }\r\n  });\r\n\r\n  return excludeCountChars;\r\n};\r\n\r\nexport { imageReadTime, getImages, match, excludeCount };\r\n","import {\r\n  imageReadTime,\r\n  getImages,\r\n  match,\r\n  excludeCount,\r\n} from './helpers/functions';\r\n\r\n/**\r\n * @class\r\n */\r\nexport default class ReadingTime {\r\n  /**\r\n   * ReadingTime Construktor\r\n   * @param {Number} $wordsPerMinute\r\n   * @param {Number} $photosPerMinute\r\n   * @param {Array} $elements\r\n   * @param {Array} $exclude\r\n   * @param {Function} onResult - callback function\r\n   */\r\n  constructor({\r\n    wordsPerMinute,\r\n    photosPerMinute,\r\n    elements,\r\n    exclude,\r\n    onResult = () => {},\r\n  }) {\r\n    this.onResult = onResult;\r\n\r\n    const $elements = document.querySelectorAll(elements);\r\n    const $exclude = document.querySelectorAll(exclude);\r\n    const $wordsPerMinute = wordsPerMinute || 200;\r\n    const $photosPerMinute = photosPerMinute;\r\n\r\n    const $regexDefault = {\r\n      // hiragana | katakana | singleCJK | korean\r\n      global: /[\\u3040-\\u309F]|[\\u30A0-\\u30FF]|[\\u4E00-\\u9FFF\\uF900-\\uFAFF\\u3400-\\u4DBF]|[\\u3131-\\uD79D]/g,\r\n      // is not a word\r\n      notAword: /\\W+/g,\r\n      // noscript\r\n      noscript: /<noscript\\b[^<]*(?:(?!<\\/noscript>)<[^<]*)*<\\/noscript>/g,\r\n      // newline\r\n      newLine: /[\\r\\n]/g,\r\n      // space\r\n      space: /\\s+/g,\r\n      // image\r\n      img: /<img([\\w\\W]+?)[/]?>/g,\r\n    };\r\n\r\n    [].slice.call([$elements]).forEach((element) => {\r\n      this.initial(\r\n        element,\r\n        $exclude,\r\n        $regexDefault,\r\n        $wordsPerMinute,\r\n        $photosPerMinute\r\n      );\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Initial\r\n   * @param {HTMLElement} elements\r\n   * @param {HTMLElement} exclude\r\n   * @param {Object} regexDefault\r\n   * @param {Number} wordsPerMinute\r\n   * @param {Number} photosPerMinute\r\n   */\r\n  initial(elements, exclude, regexDefault, wordsPerMinute, photosPerMinute) {\r\n    [].slice.call(elements).forEach((element, index) => {\r\n      // exclude count chars\r\n      const excludeCountChars = excludeCount(element, exclude, regexDefault);\r\n\r\n      // get all image from text\r\n      const numberImages = getImages(element.innerHTML, regexDefault);\r\n\r\n      // trim text\r\n      const numberWords =\r\n        match(element.innerText.trim(), regexDefault) -\r\n        (excludeCountChars || 0);\r\n\r\n      const minuteWords = numberWords / wordsPerMinute;\r\n      const imageTime = imageReadTime(numberImages, photosPerMinute);\r\n\r\n      const timeRead = photosPerMinute ? minuteWords + imageTime : minuteWords;\r\n\r\n      this.onResult(index, timeRead, numberWords, numberImages);\r\n    });\r\n  }\r\n}\r\n"],"names":["imageReadTime","numberImages","photosPerMinute","second","Math","ceil","getImages","str","img","noscript","images","image","exec","replace","push","length","match","global","notAword","newLine","space","charCount","text","split","excludeCount","element","exc","regexDefault","excludeCountChars","slice","call","forEach","ex","innerText","trim","contains","ReadingTime","wordsPerMinute","elements","exclude","onResult","$elements","document","querySelectorAll","$exclude","$wordsPerMinute","$photosPerMinute","$regexDefault","initial","index","innerHTML","numberWords","minuteWords","imageTime","timeRead"],"mappings":"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"}