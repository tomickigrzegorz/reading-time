{"version":3,"file":"readingTime.min.js","sources":["../sources/helpers/functions.js","../sources/script.js"],"sourcesContent":["// https://www.freecodecamp.org/news/how-to-more-accurately-estimate-read-time-for-medium-articles-in-javascript-fb563ff0282a/\r\n/**\r\n * Calculate how much time is needed to view photos\r\n * @param {Number} numberImages\r\n * @param {Number} photosPerMinute\r\n * @returns {Number}\r\n */\r\nconst imageReadTime = (numberImages, photosPerMinute) => {\r\n  let second =\r\n    numberImages > 10\r\n      ? (numberImages / 2) * (photosPerMinute + 3) + (numberImages - 10) * 3 // n/2(a+b)+3sec/image\r\n      : (numberImages / 2) * (2 * photosPerMinute + (1 - numberImages)); // n/2[2a+(n-1)d]\r\n\r\n  return Math.ceil(second / 60);\r\n};\r\n\r\n/**\r\n * Get all images from elements\r\n * @param {String} str\r\n * @param {Object} { img, noscript }\r\n * @returns {Number}\r\n */\r\nconst getImages = (str, { img, noscript }) => {\r\n  let images = [];\r\n  let image;\r\n\r\n  while ((image = img.exec(str.replace(noscript)))) {\r\n    images.push(image[1]);\r\n  }\r\n\r\n  return images.length;\r\n};\r\n\r\n// https://generator.lorem-ipsum.info/_korean2\r\n// https://www.regular-expressions.info/unicode.html\r\n/**\r\n * Count all characters in string\r\n * @param {String} str\r\n * @param {Object} { global, notAword, newLine, space }\r\n * @returns {Number} \r\n */\r\nconst match = (str, { global, notAword, newLine, space }) => {\r\n  const charCount = str.match(global);\r\n\r\n  let text = str.replace(notAword, ' ');\r\n  text = str.replace(newLine, ' ');\r\n  text = str.replace(global, ' ');\r\n\r\n  return text.split(space).length + (charCount ? charCount.length : 0);\r\n};\r\n\r\n/**\r\n * Count how many characters are excluded from counting\r\n * @param {HTMLElement} element\r\n * @param {Array} exc - exclude elements\r\n * @returns {Number} exclude count chars\r\n */\r\nconst excludeCount = (element, exc, regexDefault) => {\r\n  let excludeCountChars = 0;\r\n  [].slice.call(exc).forEach((ex) => {\r\n    const text = ex.innerText.trim();\r\n    if (ex && element.contains(ex)) {\r\n      excludeCountChars = match(text, regexDefault);\r\n    }\r\n  });\r\n\r\n  return excludeCountChars;\r\n};\r\n\r\nexport { imageReadTime, getImages, match, excludeCount };\r\n","import {\r\n  imageReadTime,\r\n  getImages,\r\n  match,\r\n  excludeCount,\r\n} from './helpers/functions';\r\n\r\n/**\r\n * @class\r\n */\r\nexport default class ReadingTime {\r\n  /**\r\n   * ReadingTime Construktor\r\n   * @param {Number} $wordsPerMinute\r\n   * @param {Number} $photosPerMinute\r\n   * @param {Array} $elements\r\n   * @param {Array} $exclude\r\n   * @param {Function} onResult - callback function\r\n   */\r\n  constructor({\r\n    wordsPerMinute,\r\n    photosPerMinute,\r\n    elements,\r\n    exclude,\r\n    onResult = () => {},\r\n  }) {\r\n    this.onResult = onResult;\r\n\r\n    const $elements = document.querySelectorAll(elements);\r\n    const $exclude = document.querySelectorAll(exclude);\r\n    const $wordsPerMinute = wordsPerMinute || 200;\r\n    const $photosPerMinute = photosPerMinute;\r\n\r\n    const $regexDefault = {\r\n      // hiragana | katakana | singleCJK | korean\r\n      global: /[\\u3040-\\u309F]|[\\u30A0-\\u30FF]|[\\u4E00-\\u9FFF\\uF900-\\uFAFF\\u3400-\\u4DBF]|[\\u3131-\\uD79D]/g,\r\n      // is not a word\r\n      notAword: /\\W+/g,\r\n      // noscript\r\n      noscript: /<noscript\\b[^<]*(?:(?!<\\/noscript>)<[^<]*)*<\\/noscript>/g,\r\n      // newline\r\n      newLine: /[\\r\\n]/g,\r\n      // space\r\n      space: /\\s+/g,\r\n      // image\r\n      img: /<img([\\w\\W]+?)[/]?>/g,\r\n    };\r\n\r\n    [].slice.call([$elements]).forEach((element) => {\r\n      this.initial(\r\n        element,\r\n        $exclude,\r\n        $regexDefault,\r\n        $wordsPerMinute,\r\n        $photosPerMinute\r\n      );\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Initial\r\n   * @param {HTMLElement} elements\r\n   * @param {HTMLElement} exclude\r\n   * @param {Object} regexDefault\r\n   * @param {Number} wordsPerMinute\r\n   * @param {Number} photosPerMinute\r\n   */\r\n  initial(elements, exclude, regexDefault, wordsPerMinute, photosPerMinute) {\r\n    [].slice.call(elements).forEach((element, index) => {\r\n      // exclude count chars\r\n      const excludeCountChars = excludeCount(element, exclude, regexDefault);\r\n\r\n      // get all image from text\r\n      const numberImages = getImages(element.innerHTML, regexDefault);\r\n\r\n      // trim text\r\n      const numberWords =\r\n        match(element.innerText.trim(), regexDefault) -\r\n        (excludeCountChars || 0);\r\n\r\n      const minuteWords = numberWords / wordsPerMinute;\r\n      const imageTime = imageReadTime(numberImages, photosPerMinute);\r\n\r\n      const timeRead = photosPerMinute ? minuteWords + imageTime : minuteWords;\r\n\r\n      this.onResult(index, timeRead, numberWords, numberImages);\r\n    });\r\n  }\r\n}\r\n"],"names":["match","str","global","notAword","newLine","space","charCount","replace","split","length","wordsPerMinute","photosPerMinute","elements","exclude","onResult","$elements","document","querySelectorAll","$exclude","$wordsPerMinute","$photosPerMinute","$regexDefault","noscript","img","slice","call","forEach","element","_this","initial","regexDefault","index","excludeCountChars","exc","ex","text","innerText","trim","contains","excludeCount","numberImages","image","images","exec","push","getImages","innerHTML","numberWords","minuteWords","imageTime","second","Math","ceil","imageReadTime","timeRead","_this2"],"mappings":"wCAOA,IAkCMA,EAAQ,SAACC,SAAOC,IAAAA,OAAQC,IAAAA,SAAUC,IAAAA,QAASC,IAAAA,MACzCC,EAAYL,EAAID,MAAME,GAEjBD,EAAIM,QAAQJ,EAAU,YAC1BF,EAAIM,QAAQH,EAAS,KACrBH,EAAIM,QAAQL,EAAQ,KAEfM,MAAMH,GAAOI,QAAUH,EAAYA,EAAUG,OAAS,+CC5BhEC,IAAAA,eACAC,IAAAA,gBACAC,IAAAA,SACAC,IAAAA,YACAC,SAAAA,aAAW,oBAENA,SAAWA,MAEVC,EAAYC,SAASC,iBAAiBL,GACtCM,EAAWF,SAASC,iBAAiBJ,GACrCM,EAAkBT,GAAkB,IACpCU,EAAmBT,EAEnBU,EAAgB,CAEpBnB,OAAQ,6FAERC,SAAU,OAEVmB,SAAU,2DAEVlB,QAAS,UAETC,MAAO,OAEPkB,IAAK,2BAGJC,MAAMC,KAAK,CAACV,IAAYW,SAAQ,SAACC,GAClCC,EAAKC,QACHF,EACAT,EACAG,EACAF,EACAC,yBAaNS,QAAA,SAAQjB,EAAUC,EAASiB,EAAcpB,EAAgBC,iBACpDa,MAAMC,KAAKb,GAAUc,SAAQ,SAACC,EAASI,OAElCC,EDbS,SAACL,EAASM,EAAKH,OAC9BE,EAAoB,WACrBR,MAAMC,KAAKQ,GAAKP,SAAQ,SAACQ,OACpBC,EAAOD,EAAGE,UAAUC,OACtBH,GAAMP,EAAQW,SAASJ,KACzBF,EAAoBhC,EAAMmC,EAAML,OAI7BE,ECIuBO,CAAaZ,EAASd,EAASiB,GAGnDU,EDnDM,SAACvC,aAEbwC,EAFoBlB,IAAAA,IAAKD,IAAAA,SACzBoB,EAAS,GAGLD,EAAQlB,EAAIoB,KAAK1C,EAAIM,QAAQe,KACnCoB,EAAOE,KAAKH,EAAM,WAGbC,EAAOjC,OC2CWoC,CAAUlB,EAAQmB,UAAWhB,GAG5CiB,EACJ/C,EAAM2B,EAAQS,UAAUC,OAAQP,IAC/BE,GAAqB,GAElBgB,EAAcD,EAAcrC,EAC5BuC,ED1EU,SAACT,EAAc7B,OAC/BuC,EACFV,EAAe,GACVA,EAAe,GAAM7B,EAAkB,GAA2B,GAArB6B,EAAe,IAC5DA,EAAe,GAAM,EAAI7B,GAAmB,EAAI6B,WAEhDW,KAAKC,KAAKF,EAAS,ICoEJG,CAAcb,EAAc7B,GAExC2C,EAAW3C,EAAkBqC,EAAcC,EAAYD,EAE7DO,EAAKzC,SAASiB,EAAOuB,EAAUP,EAAaP"}